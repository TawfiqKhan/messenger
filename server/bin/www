#!/usr/bin/env node

/* Sets up the environment variables from your .env file*/
require("dotenv").config();

/**
 * Module dependencies.
 */

const { app, sessionStore } = require("../app");
const http = require("http");
const db = require("../db");
const onlineUsers = require("../onlineUsers");

/**
 * Get port from environment and store in Express.
 */

const port = normalizePort(process.env.PORT || "3001");
app.set("port", port);

/**
 * Create HTTP server.
 */

const server = http.createServer(app);

/**
 * Listen on provided port, on all network interfaces, and sync database.
 */

const io = require("socket.io")(server);
const jwt = require("jsonwebtoken");

io.use(function (socket, next) {
  if (socket.handshake.query && socket.handshake.query.token) {
    jwt.verify(
      socket.handshake.query.token,
      "my_secret",
      function (err, decoded) {
        if (err) return next(new Error("Authentication error"));
        socket.decoded = decoded;
        next();
      }
    );
  } else {
    next(new Error("Authentication error"));
  }
}).on("connection", (socket) => {
  // Connection now authenticated to receive further events

  socket.on("go-online", (id) => {
    if (!onlineUsers[id]) {
      onlineUsers[id] = { id, activeConv: null, socket_id: socket.id };
      // send the user who just went online to everyone else who is already online
      socket.broadcast.emit("add-online-user", id);
    } else {
      // this is a edge case where if the user is online but reloads his browser
      onlineUsers[id].socket_id = socket.id;
    }
  });

  socket.on("new-message", (data) => {
    const intendedReceiver = findReceiver(data.recipientId);
    if (intendedReceiver) {
      // only emit to the reciver
      io.to(intendedReceiver.socket_id).emit("new-message", {
        message: data.message,
        sender: data.sender,
        recipient: data.recipientId,
        id: intendedReceiver.socket_id,
      });
    }
  });

  socket.on("started-typing", ({ reqBody }) => {
    const intendedReceiver = findReceiver(reqBody.recipientId);
    if (intendedReceiver) {
      io.to(intendedReceiver.socket_id).emit("started-typing", {
        body: reqBody,
      });
    }
  });

  socket.on("update-messages", ({ convoId, otherUserId }) => {
    const intendedReceiver = findReceiver(otherUserId);
    // only send update event if they reciver is online, else their messages will update once they sign back in.
    if (intendedReceiver) {
      io.to(intendedReceiver.socket_id).emit("update-messages", {
        convoId,
        otherUserId,
      });
    }
  });

  socket.on("logout", (id, socket_id) => {
    // condition preventing unauthorized users to log someone else out
    if (onlineUsers[id] && onlineUsers[id].socket_id) {
      delete onlineUsers[id];
    }
    socket.broadcast.emit("remove-offline-user", id);
  });
});

sessionStore
  .sync()
  .then(() => db.sync())
  .then(() => {
    server.listen(port);
    server.on("error", onError);
    server.on("listening", onListening);
  });

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  const port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function findReceiver(recipientId) {
  return onlineUsers[recipientId] || null;
}

function onError(error) {
  if (error.syscall !== "listen") {
    throw error;
  }

  const bind = typeof port === "string" ? "Pipe " + port : "Port " + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case "EACCES":
      console.error(bind + " requires elevated privileges");
      process.exit(1);
      break;
    case "EADDRINUSE":
      console.error(bind + " is already in use");
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  const addr = server.address();
  const bind = typeof addr === "string" ? "pipe " + addr : "port " + addr.port;

  console.log("Listening on " + bind);
}
